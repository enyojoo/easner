"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/transactions/route";
exports.ids = ["app/api/transactions/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftransactions%2Froute&page=%2Fapi%2Ftransactions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftransactions%2Froute.ts&appDir=D%3A%5CUsers%5Cenyoc%5CDocuments%5CDev%5Ceasner%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CUsers%5Cenyoc%5CDocuments%5CDev%5Ceasner&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftransactions%2Froute&page=%2Fapi%2Ftransactions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftransactions%2Froute.ts&appDir=D%3A%5CUsers%5Cenyoc%5CDocuments%5CDev%5Ceasner%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CUsers%5Cenyoc%5CDocuments%5CDev%5Ceasner&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_Users_enyoc_Documents_Dev_easner_app_api_transactions_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/transactions/route.ts */ \"(rsc)/./app/api/transactions/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/transactions/route\",\n        pathname: \"/api/transactions\",\n        filename: \"route\",\n        bundlePath: \"app/api/transactions/route\"\n    },\n    resolvedPagePath: \"D:\\\\Users\\\\enyoc\\\\Documents\\\\Dev\\\\easner\\\\app\\\\api\\\\transactions\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_Users_enyoc_Documents_Dev_easner_app_api_transactions_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/transactions/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ0cmFuc2FjdGlvbnMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnRyYW5zYWN0aW9ucyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnRyYW5zYWN0aW9ucyUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDVXNlcnMlNUNlbnlvYyU1Q0RvY3VtZW50cyU1Q0RldiU1Q2Vhc25lciU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9RCUzQSU1Q1VzZXJzJTVDZW55b2MlNUNEb2N1bWVudHMlNUNEZXYlNUNlYXNuZXImaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzBCO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWFzbmVyLz8xNzJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkQ6XFxcXFVzZXJzXFxcXGVueW9jXFxcXERvY3VtZW50c1xcXFxEZXZcXFxcZWFzbmVyXFxcXGFwcFxcXFxhcGlcXFxcdHJhbnNhY3Rpb25zXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS90cmFuc2FjdGlvbnMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS90cmFuc2FjdGlvbnNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3RyYW5zYWN0aW9ucy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkQ6XFxcXFVzZXJzXFxcXGVueW9jXFxcXERvY3VtZW50c1xcXFxEZXZcXFxcZWFzbmVyXFxcXGFwcFxcXFxhcGlcXFxcdHJhbnNhY3Rpb25zXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS90cmFuc2FjdGlvbnMvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftransactions%2Froute&page=%2Fapi%2Ftransactions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftransactions%2Froute.ts&appDir=D%3A%5CUsers%5Cenyoc%5CDocuments%5CDev%5Ceasner%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CUsers%5Cenyoc%5CDocuments%5CDev%5Ceasner&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/transactions/route.ts":
/*!***************************************!*\
  !*** ./app/api/transactions/route.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/database */ \"(rsc)/./lib/database.ts\");\n/* harmony import */ var _lib_auth_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/auth-utils */ \"(rsc)/./lib/auth-utils.ts\");\n\n\n\nconst GET = (0,_lib_auth_utils__WEBPACK_IMPORTED_MODULE_2__.withErrorHandling)(async (request)=>{\n    const user = await (0,_lib_auth_utils__WEBPACK_IMPORTED_MODULE_2__.requireUser)(request);\n    const transactions = await _lib_database__WEBPACK_IMPORTED_MODULE_1__.transactionService.getByUserId(user.id, 20, user.id);\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        transactions\n    });\n});\nconst POST = (0,_lib_auth_utils__WEBPACK_IMPORTED_MODULE_2__.withErrorHandling)(async (request)=>{\n    const user = await (0,_lib_auth_utils__WEBPACK_IMPORTED_MODULE_2__.requireUser)(request);\n    const { recipientId, sendAmount, sendCurrency, receiveCurrency } = await request.json();\n    // Validate input\n    if (!recipientId || !sendAmount || !sendCurrency || !receiveCurrency) {\n        return (0,_lib_auth_utils__WEBPACK_IMPORTED_MODULE_2__.createErrorResponse)(\"Missing required fields\", 400);\n    }\n    if (sendAmount <= 0) {\n        return (0,_lib_auth_utils__WEBPACK_IMPORTED_MODULE_2__.createErrorResponse)(\"Send amount must be greater than 0\", 400);\n    }\n    // Get exchange rate\n    const rateData = await _lib_database__WEBPACK_IMPORTED_MODULE_1__.currencyService.getRate(sendCurrency, receiveCurrency);\n    if (!rateData) {\n        return (0,_lib_auth_utils__WEBPACK_IMPORTED_MODULE_2__.createErrorResponse)(\"Exchange rate not available\", 400);\n    }\n    const receiveAmount = sendAmount * rateData.rate;\n    let feeAmount = 0;\n    // Calculate fee\n    if (rateData.fee_type === \"fixed\") {\n        feeAmount = rateData.fee_amount;\n    } else if (rateData.fee_type === \"percentage\") {\n        feeAmount = sendAmount * rateData.fee_amount / 100;\n    }\n    const totalAmount = sendAmount + feeAmount;\n    const transaction = await _lib_database__WEBPACK_IMPORTED_MODULE_1__.transactionService.create({\n        userId: user.id,\n        recipientId,\n        sendAmount,\n        sendCurrency,\n        receiveAmount,\n        receiveCurrency,\n        exchangeRate: rateData.rate,\n        feeAmount,\n        feeType: rateData.fee_type,\n        totalAmount\n    }, user.id);\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        transaction\n    });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3RyYW5zYWN0aW9ucy9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE0RDtBQUNRO0FBQ2tCO0FBRS9FLE1BQU1NLE1BQU1ELGtFQUFpQkEsQ0FBQyxPQUFPRTtJQUMxQyxNQUFNQyxPQUFPLE1BQU1MLDREQUFXQSxDQUFDSTtJQUMvQixNQUFNRSxlQUFlLE1BQU1SLDZEQUFrQkEsQ0FBQ1MsV0FBVyxDQUFDRixLQUFLRyxFQUFFLEVBQUUsSUFBSUgsS0FBS0csRUFBRTtJQUU5RSxPQUFPWCxxREFBWUEsQ0FBQ1ksSUFBSSxDQUFDO1FBQUVIO0lBQWE7QUFDMUMsR0FBRTtBQUVLLE1BQU1JLE9BQU9SLGtFQUFpQkEsQ0FBQyxPQUFPRTtJQUMzQyxNQUFNQyxPQUFPLE1BQU1MLDREQUFXQSxDQUFDSTtJQUMvQixNQUFNLEVBQUVPLFdBQVcsRUFBRUMsVUFBVSxFQUFFQyxZQUFZLEVBQUVDLGVBQWUsRUFBRSxHQUFHLE1BQU1WLFFBQVFLLElBQUk7SUFFckYsaUJBQWlCO0lBQ2pCLElBQUksQ0FBQ0UsZUFBZSxDQUFDQyxjQUFjLENBQUNDLGdCQUFnQixDQUFDQyxpQkFBaUI7UUFDcEUsT0FBT2Isb0VBQW1CQSxDQUFDLDJCQUEyQjtJQUN4RDtJQUVBLElBQUlXLGNBQWMsR0FBRztRQUNuQixPQUFPWCxvRUFBbUJBLENBQUMsc0NBQXNDO0lBQ25FO0lBRUUsb0JBQW9CO0lBQ3BCLE1BQU1jLFdBQVcsTUFBTWhCLDBEQUFlQSxDQUFDaUIsT0FBTyxDQUFDSCxjQUFjQztJQUM3RCxJQUFJLENBQUNDLFVBQVU7UUFDZixPQUFPZCxvRUFBbUJBLENBQUMsK0JBQStCO0lBQzFEO0lBRUEsTUFBTWdCLGdCQUFnQkwsYUFBYUcsU0FBU0csSUFBSTtJQUNoRCxJQUFJQyxZQUFZO0lBRWhCLGdCQUFnQjtJQUNoQixJQUFJSixTQUFTSyxRQUFRLEtBQUssU0FBUztRQUNqQ0QsWUFBWUosU0FBU00sVUFBVTtJQUNqQyxPQUFPLElBQUlOLFNBQVNLLFFBQVEsS0FBSyxjQUFjO1FBQzdDRCxZQUFZLGFBQWNKLFNBQVNNLFVBQVUsR0FBSTtJQUNuRDtJQUVBLE1BQU1DLGNBQWNWLGFBQWFPO0lBRWpDLE1BQU1JLGNBQWMsTUFBTXpCLDZEQUFrQkEsQ0FBQzBCLE1BQU0sQ0FBQztRQUNsREMsUUFBUXBCLEtBQUtHLEVBQUU7UUFDZkc7UUFDQUM7UUFDQUM7UUFDQUk7UUFDQUg7UUFDQVksY0FBY1gsU0FBU0csSUFBSTtRQUMzQkM7UUFDQVEsU0FBU1osU0FBU0ssUUFBUTtRQUMxQkU7SUFDSixHQUFHakIsS0FBS0csRUFBRTtJQUVSLE9BQU9YLHFEQUFZQSxDQUFDWSxJQUFJLENBQUM7UUFBRWM7SUFBWTtBQUMzQyxHQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWFzbmVyLy4vYXBwL2FwaS90cmFuc2FjdGlvbnMvcm91dGUudHM/NzcyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tIFwibmV4dC9zZXJ2ZXJcIlxyXG5pbXBvcnQgeyB0cmFuc2FjdGlvblNlcnZpY2UsIGN1cnJlbmN5U2VydmljZSB9IGZyb20gXCJAL2xpYi9kYXRhYmFzZVwiXHJcbmltcG9ydCB7IHJlcXVpcmVVc2VyLCBjcmVhdGVFcnJvclJlc3BvbnNlLCB3aXRoRXJyb3JIYW5kbGluZyB9IGZyb20gXCJAL2xpYi9hdXRoLXV0aWxzXCJcclxuXHJcbmV4cG9ydCBjb25zdCBHRVQgPSB3aXRoRXJyb3JIYW5kbGluZyhhc3luYyAocmVxdWVzdDogTmV4dFJlcXVlc3QpID0+IHtcclxuICBjb25zdCB1c2VyID0gYXdhaXQgcmVxdWlyZVVzZXIocmVxdWVzdClcclxuICBjb25zdCB0cmFuc2FjdGlvbnMgPSBhd2FpdCB0cmFuc2FjdGlvblNlcnZpY2UuZ2V0QnlVc2VySWQodXNlci5pZCwgMjAsIHVzZXIuaWQpXHJcblxyXG4gIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IHRyYW5zYWN0aW9ucyB9KVxyXG59KVxyXG5cclxuZXhwb3J0IGNvbnN0IFBPU1QgPSB3aXRoRXJyb3JIYW5kbGluZyhhc3luYyAocmVxdWVzdDogTmV4dFJlcXVlc3QpID0+IHtcclxuICBjb25zdCB1c2VyID0gYXdhaXQgcmVxdWlyZVVzZXIocmVxdWVzdClcclxuICBjb25zdCB7IHJlY2lwaWVudElkLCBzZW5kQW1vdW50LCBzZW5kQ3VycmVuY3ksIHJlY2VpdmVDdXJyZW5jeSB9ID0gYXdhaXQgcmVxdWVzdC5qc29uKClcclxuXHJcbiAgLy8gVmFsaWRhdGUgaW5wdXRcclxuICBpZiAoIXJlY2lwaWVudElkIHx8ICFzZW5kQW1vdW50IHx8ICFzZW5kQ3VycmVuY3kgfHwgIXJlY2VpdmVDdXJyZW5jeSkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoXCJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkc1wiLCA0MDApXHJcbiAgfVxyXG5cclxuICBpZiAoc2VuZEFtb3VudCA8PSAwKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlRXJyb3JSZXNwb25zZShcIlNlbmQgYW1vdW50IG11c3QgYmUgZ3JlYXRlciB0aGFuIDBcIiwgNDAwKVxyXG4gIH1cclxuXHJcbiAgICAvLyBHZXQgZXhjaGFuZ2UgcmF0ZVxyXG4gICAgY29uc3QgcmF0ZURhdGEgPSBhd2FpdCBjdXJyZW5jeVNlcnZpY2UuZ2V0UmF0ZShzZW5kQ3VycmVuY3ksIHJlY2VpdmVDdXJyZW5jeSlcclxuICAgIGlmICghcmF0ZURhdGEpIHtcclxuICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKFwiRXhjaGFuZ2UgcmF0ZSBub3QgYXZhaWxhYmxlXCIsIDQwMClcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZWNlaXZlQW1vdW50ID0gc2VuZEFtb3VudCAqIHJhdGVEYXRhLnJhdGVcclxuICAgIGxldCBmZWVBbW91bnQgPSAwXHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIGZlZVxyXG4gICAgaWYgKHJhdGVEYXRhLmZlZV90eXBlID09PSBcImZpeGVkXCIpIHtcclxuICAgICAgZmVlQW1vdW50ID0gcmF0ZURhdGEuZmVlX2Ftb3VudFxyXG4gICAgfSBlbHNlIGlmIChyYXRlRGF0YS5mZWVfdHlwZSA9PT0gXCJwZXJjZW50YWdlXCIpIHtcclxuICAgICAgZmVlQW1vdW50ID0gKHNlbmRBbW91bnQgKiByYXRlRGF0YS5mZWVfYW1vdW50KSAvIDEwMFxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRvdGFsQW1vdW50ID0gc2VuZEFtb3VudCArIGZlZUFtb3VudFxyXG5cclxuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gYXdhaXQgdHJhbnNhY3Rpb25TZXJ2aWNlLmNyZWF0ZSh7XHJcbiAgICAgIHVzZXJJZDogdXNlci5pZCxcclxuICAgICAgcmVjaXBpZW50SWQsXHJcbiAgICAgIHNlbmRBbW91bnQsXHJcbiAgICAgIHNlbmRDdXJyZW5jeSxcclxuICAgICAgcmVjZWl2ZUFtb3VudCxcclxuICAgICAgcmVjZWl2ZUN1cnJlbmN5LFxyXG4gICAgICBleGNoYW5nZVJhdGU6IHJhdGVEYXRhLnJhdGUsXHJcbiAgICAgIGZlZUFtb3VudCxcclxuICAgICAgZmVlVHlwZTogcmF0ZURhdGEuZmVlX3R5cGUsXHJcbiAgICAgIHRvdGFsQW1vdW50LFxyXG4gIH0sIHVzZXIuaWQpXHJcblxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgdHJhbnNhY3Rpb24gfSlcclxufSlcclxuIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsInRyYW5zYWN0aW9uU2VydmljZSIsImN1cnJlbmN5U2VydmljZSIsInJlcXVpcmVVc2VyIiwiY3JlYXRlRXJyb3JSZXNwb25zZSIsIndpdGhFcnJvckhhbmRsaW5nIiwiR0VUIiwicmVxdWVzdCIsInVzZXIiLCJ0cmFuc2FjdGlvbnMiLCJnZXRCeVVzZXJJZCIsImlkIiwianNvbiIsIlBPU1QiLCJyZWNpcGllbnRJZCIsInNlbmRBbW91bnQiLCJzZW5kQ3VycmVuY3kiLCJyZWNlaXZlQ3VycmVuY3kiLCJyYXRlRGF0YSIsImdldFJhdGUiLCJyZWNlaXZlQW1vdW50IiwicmF0ZSIsImZlZUFtb3VudCIsImZlZV90eXBlIiwiZmVlX2Ftb3VudCIsInRvdGFsQW1vdW50IiwidHJhbnNhY3Rpb24iLCJjcmVhdGUiLCJ1c2VySWQiLCJleGNoYW5nZVJhdGUiLCJmZWVUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/transactions/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/auth-utils.ts":
/*!***************************!*\
  !*** ./lib/auth-utils.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createErrorResponse: () => (/* binding */ createErrorResponse),\n/* harmony export */   createSuccessResponse: () => (/* binding */ createSuccessResponse),\n/* harmony export */   getAuthenticatedUser: () => (/* binding */ getAuthenticatedUser),\n/* harmony export */   requireAdmin: () => (/* binding */ requireAdmin),\n/* harmony export */   requireAuth: () => (/* binding */ requireAuth),\n/* harmony export */   requireUser: () => (/* binding */ requireUser),\n/* harmony export */   requireUserAccess: () => (/* binding */ requireUserAccess),\n/* harmony export */   validateUserAccess: () => (/* binding */ validateUserAccess),\n/* harmony export */   withErrorHandling: () => (/* binding */ withErrorHandling)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./lib/supabase.ts\");\n\n/**\r\n * Enhanced authentication with better error handling and validation\r\n */ async function getAuthenticatedUser(request) {\n    try {\n        const supabase = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.createServerClient)();\n        // Try to get token from Authorization header first\n        const authHeader = request.headers.get(\"authorization\");\n        let token = null;\n        if (authHeader && authHeader.startsWith(\"Bearer \")) {\n            token = authHeader.substring(7);\n        }\n        // If no auth header, try to get from cookies\n        if (!token) {\n            token = request.cookies.get(\"sb-access-token\")?.value || null;\n        }\n        if (!token) {\n            console.log(\"No authentication token found\");\n            return null;\n        }\n        // Verify the token with Supabase with timeout\n        const authPromise = supabase.auth.getUser(token);\n        const timeoutPromise = new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Auth timeout\")), 10000));\n        const { data: { user }, error } = await Promise.race([\n            authPromise,\n            timeoutPromise\n        ]);\n        if (error) {\n            console.error(\"Auth token verification failed:\", error.message);\n            return null;\n        }\n        if (!user) {\n            console.log(\"No user found in token\");\n            return null;\n        }\n        // Get user profile from database with enhanced validation\n        let userProfile = null;\n        let isAdmin = false;\n        try {\n            // Try regular users table first\n            const { data: regularUser, error: regularUserError } = await supabase.from(\"users\").select(\"*\").eq(\"id\", user.id).single();\n            if (regularUser && !regularUserError) {\n                userProfile = regularUser;\n                isAdmin = false;\n                console.log(\"Regular user authenticated:\", regularUser.email);\n            } else {\n                // Check admin_users table\n                const { data: adminUser, error: adminError } = await supabase.from(\"admin_users\").select(\"*\").eq(\"id\", user.id).single();\n                if (adminUser && !adminError) {\n                    userProfile = adminUser;\n                    isAdmin = true;\n                    console.log(\"Admin user authenticated:\", adminUser.email);\n                }\n            }\n        } catch (dbError) {\n            console.error(\"Database profile lookup failed:\", dbError);\n            return null;\n        }\n        if (!userProfile) {\n            console.log(\"User profile not found in database\");\n            return null;\n        }\n        // Additional validation\n        if (userProfile.status && userProfile.status !== \"active\") {\n            console.log(\"User account is not active:\", userProfile.status);\n            return null;\n        }\n        return {\n            id: user.id,\n            email: user.email,\n            isAdmin,\n            profile: userProfile\n        };\n    } catch (error) {\n        console.error(\"Authentication error:\", error);\n        return null;\n    }\n}\n/**\r\n * Require authentication - throws error if not authenticated\r\n */ async function requireAuth(request) {\n    const user = await getAuthenticatedUser(request);\n    if (!user) {\n        throw new Error(\"Authentication required\");\n    }\n    if (user.profile.status !== \"active\") {\n        throw new Error(\"Account is suspended\");\n    }\n    return user;\n}\n/**\r\n * Require admin authentication - throws error if not admin\r\n */ async function requireAdmin(request) {\n    const user = await requireAuth(request);\n    if (!user.isAdmin) {\n        throw new Error(\"Admin access required\");\n    }\n    return user;\n}\n/**\r\n * Require user authentication (non-admin) - throws error if admin or not authenticated\r\n */ async function requireUser(request) {\n    const user = await requireAuth(request);\n    if (user.isAdmin) {\n        throw new Error(\"Admin users cannot access user APIs\");\n    }\n    return user;\n}\n/**\r\n * Validate user access to specific resource\r\n */ function validateUserAccess(user, resourceUserId) {\n    if (user.isAdmin) {\n        return true // Admins can access all resources\n        ;\n    }\n    return user.id === resourceUserId;\n}\n/**\r\n * Validate user access and throw error if not allowed\r\n */ function requireUserAccess(user, resourceUserId) {\n    if (!validateUserAccess(user, resourceUserId)) {\n        throw new Error(\"Access denied: You can only access your own resources\");\n    }\n}\n/**\r\n * Create standardized API error response\r\n */ function createErrorResponse(message, status = 500) {\n    return Response.json({\n        error: message,\n        timestamp: new Date().toISOString()\n    }, {\n        status\n    });\n}\n/**\r\n * Create standardized API success response\r\n */ function createSuccessResponse(data, status = 200) {\n    return Response.json({\n        success: true,\n        data,\n        timestamp: new Date().toISOString()\n    }, {\n        status\n    });\n}\n/**\r\n * Wrap API handler with error handling\r\n */ function withErrorHandling(handler) {\n    return async (request)=>{\n        try {\n            return await handler(request);\n        } catch (error) {\n            console.error(\"API Error:\", error);\n            if (error instanceof Error) {\n                switch(error.message){\n                    case \"Authentication required\":\n                        return createErrorResponse(\"Authentication required\", 401);\n                    case \"Admin access required\":\n                        return createErrorResponse(\"Admin access required\", 403);\n                    case \"Account is suspended\":\n                        return createErrorResponse(\"Account is suspended\", 403);\n                    default:\n                        return createErrorResponse( true ? error.message : 0, 500);\n                }\n            }\n            return createErrorResponse(\"Internal server error\", 500);\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNuQyxHQUNBO1FBQUViO0lBQU87QUFFYjtBQUVBOztDQUVDLEdBQ00sU0FBU2Msc0JBQXNCaEMsSUFBUyxFQUFFa0IsU0FBaUIsR0FBRztJQUNuRSxPQUFPUyxTQUFTQyxJQUFJLENBQ2xCO1FBQ0VLLFNBQVM7UUFDVGpDO1FBQ0E2QixXQUFXLElBQUlDLE9BQU9DLFdBQVc7SUFDbkMsR0FDQTtRQUFFYjtJQUFPO0FBRWI7QUFFQTs7Q0FFQyxHQUNNLFNBQVNnQixrQkFBa0JDLE9BQW9EO0lBQ3BGLE9BQU8sT0FBT3hEO1FBQ1osSUFBSTtZQUNGLE9BQU8sTUFBTXdELFFBQVF4RDtRQUN2QixFQUFFLE9BQU91QixPQUFPO1lBQ2RiLFFBQVFhLEtBQUssQ0FBQyxjQUFjQTtZQUU1QixJQUFJQSxpQkFBaUJILE9BQU87Z0JBQzFCLE9BQVFHLE1BQU1FLE9BQU87b0JBQ25CLEtBQUs7d0JBQ0gsT0FBT3NCLG9CQUFvQiwyQkFBMkI7b0JBQ3hELEtBQUs7d0JBQ0gsT0FBT0Esb0JBQW9CLHlCQUF5QjtvQkFDdEQsS0FBSzt3QkFDSCxPQUFPQSxvQkFBb0Isd0JBQXdCO29CQUNyRDt3QkFDRSxPQUFPQSxvQkFDTFUsS0FBc0MsR0FDbENsQyxNQUFNRSxPQUFPLEdBQ2IsQ0FBdUIsRUFDM0I7Z0JBRU47WUFDRjtZQUVBLE9BQU9zQixvQkFBb0IseUJBQXlCO1FBQ3REO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc25lci8uL2xpYi9hdXRoLXV0aWxzLnRzPzM4MTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHlwZSBOZXh0UmVxdWVzdCB9IGZyb20gXCJuZXh0L3NlcnZlclwiXHJcbmltcG9ydCB7IGNyZWF0ZVNlcnZlckNsaWVudCB9IGZyb20gXCIuL3N1cGFiYXNlXCJcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXV0aGVudGljYXRlZFVzZXIge1xyXG4gIGlkOiBzdHJpbmdcclxuICBlbWFpbDogc3RyaW5nXHJcbiAgaXNBZG1pbjogYm9vbGVhblxyXG4gIHByb2ZpbGU6IGFueVxyXG59XHJcblxyXG4vKipcclxuICogRW5oYW5jZWQgYXV0aGVudGljYXRpb24gd2l0aCBiZXR0ZXIgZXJyb3IgaGFuZGxpbmcgYW5kIHZhbGlkYXRpb25cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBdXRoZW50aWNhdGVkVXNlcihyZXF1ZXN0OiBOZXh0UmVxdWVzdCk6IFByb21pc2U8QXV0aGVudGljYXRlZFVzZXIgfCBudWxsPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlU2VydmVyQ2xpZW50KClcclxuICAgIFxyXG4gICAgLy8gVHJ5IHRvIGdldCB0b2tlbiBmcm9tIEF1dGhvcml6YXRpb24gaGVhZGVyIGZpcnN0XHJcbiAgICBjb25zdCBhdXRoSGVhZGVyID0gcmVxdWVzdC5oZWFkZXJzLmdldChcImF1dGhvcml6YXRpb25cIilcclxuICAgIGxldCB0b2tlbjogc3RyaW5nIHwgbnVsbCA9IG51bGxcclxuICAgIFxyXG4gICAgaWYgKGF1dGhIZWFkZXIgJiYgYXV0aEhlYWRlci5zdGFydHNXaXRoKFwiQmVhcmVyIFwiKSkge1xyXG4gICAgICB0b2tlbiA9IGF1dGhIZWFkZXIuc3Vic3RyaW5nKDcpXHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIElmIG5vIGF1dGggaGVhZGVyLCB0cnkgdG8gZ2V0IGZyb20gY29va2llc1xyXG4gICAgaWYgKCF0b2tlbikge1xyXG4gICAgICB0b2tlbiA9IHJlcXVlc3QuY29va2llcy5nZXQoXCJzYi1hY2Nlc3MtdG9rZW5cIik/LnZhbHVlIHx8IG51bGxcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKCF0b2tlbikge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIk5vIGF1dGhlbnRpY2F0aW9uIHRva2VuIGZvdW5kXCIpXHJcbiAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcblxyXG4gICAgLy8gVmVyaWZ5IHRoZSB0b2tlbiB3aXRoIFN1cGFiYXNlIHdpdGggdGltZW91dFxyXG4gICAgY29uc3QgYXV0aFByb21pc2UgPSBzdXBhYmFzZS5hdXRoLmdldFVzZXIodG9rZW4pXHJcbiAgICBjb25zdCB0aW1lb3V0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IFxyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHJlamVjdChuZXcgRXJyb3IoXCJBdXRoIHRpbWVvdXRcIikpLCAxMDAwMClcclxuICAgIClcclxuXHJcbiAgICBjb25zdCB7IGRhdGE6IHsgdXNlciB9LCBlcnJvciB9ID0gYXdhaXQgUHJvbWlzZS5yYWNlKFthdXRoUHJvbWlzZSwgdGltZW91dFByb21pc2VdKSBhcyBhbnlcclxuICAgIFxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJBdXRoIHRva2VuIHZlcmlmaWNhdGlvbiBmYWlsZWQ6XCIsIGVycm9yLm1lc3NhZ2UpXHJcbiAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICghdXNlcikge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIk5vIHVzZXIgZm91bmQgaW4gdG9rZW5cIilcclxuICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxuXHJcbiAgICAvLyBHZXQgdXNlciBwcm9maWxlIGZyb20gZGF0YWJhc2Ugd2l0aCBlbmhhbmNlZCB2YWxpZGF0aW9uXHJcbiAgICBsZXQgdXNlclByb2ZpbGUgPSBudWxsXHJcbiAgICBsZXQgaXNBZG1pbiA9IGZhbHNlXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gVHJ5IHJlZ3VsYXIgdXNlcnMgdGFibGUgZmlyc3RcclxuICAgICAgY29uc3QgeyBkYXRhOiByZWd1bGFyVXNlciwgZXJyb3I6IHJlZ3VsYXJVc2VyRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgLmZyb20oXCJ1c2Vyc1wiKVxyXG4gICAgICAgIC5zZWxlY3QoXCIqXCIpXHJcbiAgICAgICAgLmVxKFwiaWRcIiwgdXNlci5pZClcclxuICAgICAgICAuc2luZ2xlKClcclxuXHJcbiAgICAgIGlmIChyZWd1bGFyVXNlciAmJiAhcmVndWxhclVzZXJFcnJvcikge1xyXG4gICAgICAgIHVzZXJQcm9maWxlID0gcmVndWxhclVzZXJcclxuICAgICAgICBpc0FkbWluID0gZmFsc2VcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlJlZ3VsYXIgdXNlciBhdXRoZW50aWNhdGVkOlwiLCByZWd1bGFyVXNlci5lbWFpbClcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBDaGVjayBhZG1pbl91c2VycyB0YWJsZVxyXG4gICAgICAgIGNvbnN0IHsgZGF0YTogYWRtaW5Vc2VyLCBlcnJvcjogYWRtaW5FcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgICAgIC5mcm9tKFwiYWRtaW5fdXNlcnNcIilcclxuICAgICAgICAgIC5zZWxlY3QoXCIqXCIpXHJcbiAgICAgICAgICAuZXEoXCJpZFwiLCB1c2VyLmlkKVxyXG4gICAgICAgICAgLnNpbmdsZSgpXHJcblxyXG4gICAgICAgIGlmIChhZG1pblVzZXIgJiYgIWFkbWluRXJyb3IpIHtcclxuICAgICAgICAgIHVzZXJQcm9maWxlID0gYWRtaW5Vc2VyXHJcbiAgICAgICAgICBpc0FkbWluID0gdHJ1ZVxyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJBZG1pbiB1c2VyIGF1dGhlbnRpY2F0ZWQ6XCIsIGFkbWluVXNlci5lbWFpbClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGRiRXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkRhdGFiYXNlIHByb2ZpbGUgbG9va3VwIGZhaWxlZDpcIiwgZGJFcnJvcilcclxuICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXVzZXJQcm9maWxlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiVXNlciBwcm9maWxlIG5vdCBmb3VuZCBpbiBkYXRhYmFzZVwiKVxyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkZGl0aW9uYWwgdmFsaWRhdGlvblxyXG4gICAgaWYgKHVzZXJQcm9maWxlLnN0YXR1cyAmJiB1c2VyUHJvZmlsZS5zdGF0dXMgIT09IFwiYWN0aXZlXCIpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJVc2VyIGFjY291bnQgaXMgbm90IGFjdGl2ZTpcIiwgdXNlclByb2ZpbGUuc3RhdHVzKVxyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiB1c2VyLmlkLFxyXG4gICAgICBlbWFpbDogdXNlci5lbWFpbCEsXHJcbiAgICAgIGlzQWRtaW4sXHJcbiAgICAgIHByb2ZpbGU6IHVzZXJQcm9maWxlLFxyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiQXV0aGVudGljYXRpb24gZXJyb3I6XCIsIGVycm9yKVxyXG4gICAgcmV0dXJuIG51bGxcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXF1aXJlIGF1dGhlbnRpY2F0aW9uIC0gdGhyb3dzIGVycm9yIGlmIG5vdCBhdXRoZW50aWNhdGVkXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVxdWlyZUF1dGgocmVxdWVzdDogTmV4dFJlcXVlc3QpOiBQcm9taXNlPEF1dGhlbnRpY2F0ZWRVc2VyPiB7XHJcbiAgY29uc3QgdXNlciA9IGF3YWl0IGdldEF1dGhlbnRpY2F0ZWRVc2VyKHJlcXVlc3QpXHJcbiAgXHJcbiAgaWYgKCF1c2VyKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdXRoZW50aWNhdGlvbiByZXF1aXJlZFwiKVxyXG4gIH1cclxuICBcclxuICBpZiAodXNlci5wcm9maWxlLnN0YXR1cyAhPT0gXCJhY3RpdmVcIikge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQWNjb3VudCBpcyBzdXNwZW5kZWRcIilcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHVzZXJcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcXVpcmUgYWRtaW4gYXV0aGVudGljYXRpb24gLSB0aHJvd3MgZXJyb3IgaWYgbm90IGFkbWluXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVxdWlyZUFkbWluKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KTogUHJvbWlzZTxBdXRoZW50aWNhdGVkVXNlcj4ge1xyXG4gIGNvbnN0IHVzZXIgPSBhd2FpdCByZXF1aXJlQXV0aChyZXF1ZXN0KVxyXG4gIFxyXG4gIGlmICghdXNlci5pc0FkbWluKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBZG1pbiBhY2Nlc3MgcmVxdWlyZWRcIilcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHVzZXJcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcXVpcmUgdXNlciBhdXRoZW50aWNhdGlvbiAobm9uLWFkbWluKSAtIHRocm93cyBlcnJvciBpZiBhZG1pbiBvciBub3QgYXV0aGVudGljYXRlZFxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlcXVpcmVVc2VyKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KTogUHJvbWlzZTxBdXRoZW50aWNhdGVkVXNlcj4ge1xyXG4gIGNvbnN0IHVzZXIgPSBhd2FpdCByZXF1aXJlQXV0aChyZXF1ZXN0KVxyXG4gIFxyXG4gIGlmICh1c2VyLmlzQWRtaW4pIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIkFkbWluIHVzZXJzIGNhbm5vdCBhY2Nlc3MgdXNlciBBUElzXCIpXHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiB1c2VyXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZSB1c2VyIGFjY2VzcyB0byBzcGVjaWZpYyByZXNvdXJjZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlVXNlckFjY2Vzcyh1c2VyOiBBdXRoZW50aWNhdGVkVXNlciwgcmVzb3VyY2VVc2VySWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gIGlmICh1c2VyLmlzQWRtaW4pIHtcclxuICAgIHJldHVybiB0cnVlIC8vIEFkbWlucyBjYW4gYWNjZXNzIGFsbCByZXNvdXJjZXNcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHVzZXIuaWQgPT09IHJlc291cmNlVXNlcklkXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZSB1c2VyIGFjY2VzcyBhbmQgdGhyb3cgZXJyb3IgaWYgbm90IGFsbG93ZWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlVXNlckFjY2Vzcyh1c2VyOiBBdXRoZW50aWNhdGVkVXNlciwgcmVzb3VyY2VVc2VySWQ6IHN0cmluZyk6IHZvaWQge1xyXG4gIGlmICghdmFsaWRhdGVVc2VyQWNjZXNzKHVzZXIsIHJlc291cmNlVXNlcklkKSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQWNjZXNzIGRlbmllZDogWW91IGNhbiBvbmx5IGFjY2VzcyB5b3VyIG93biByZXNvdXJjZXNcIilcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgc3RhbmRhcmRpemVkIEFQSSBlcnJvciByZXNwb25zZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVycm9yUmVzcG9uc2UobWVzc2FnZTogc3RyaW5nLCBzdGF0dXM6IG51bWJlciA9IDUwMCkge1xyXG4gIHJldHVybiBSZXNwb25zZS5qc29uKFxyXG4gICAgeyBcclxuICAgICAgZXJyb3I6IG1lc3NhZ2UsXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgfSwgXHJcbiAgICB7IHN0YXR1cyB9XHJcbiAgKVxyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlIHN0YW5kYXJkaXplZCBBUEkgc3VjY2VzcyByZXNwb25zZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZShkYXRhOiBhbnksIHN0YXR1czogbnVtYmVyID0gMjAwKSB7XHJcbiAgcmV0dXJuIFJlc3BvbnNlLmpzb24oXHJcbiAgICB7XHJcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgIGRhdGEsXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgfSxcclxuICAgIHsgc3RhdHVzIH1cclxuICApXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBXcmFwIEFQSSBoYW5kbGVyIHdpdGggZXJyb3IgaGFuZGxpbmdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB3aXRoRXJyb3JIYW5kbGluZyhoYW5kbGVyOiAocmVxdWVzdDogTmV4dFJlcXVlc3QpID0+IFByb21pc2U8UmVzcG9uc2U+KSB7XHJcbiAgcmV0dXJuIGFzeW5jIChyZXF1ZXN0OiBOZXh0UmVxdWVzdCk6IFByb21pc2U8UmVzcG9uc2U+ID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiBhd2FpdCBoYW5kbGVyKHJlcXVlc3QpXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiQVBJIEVycm9yOlwiLCBlcnJvcilcclxuICAgICAgXHJcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgc3dpdGNoIChlcnJvci5tZXNzYWdlKSB7XHJcbiAgICAgICAgICBjYXNlIFwiQXV0aGVudGljYXRpb24gcmVxdWlyZWRcIjpcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoXCJBdXRoZW50aWNhdGlvbiByZXF1aXJlZFwiLCA0MDEpXHJcbiAgICAgICAgICBjYXNlIFwiQWRtaW4gYWNjZXNzIHJlcXVpcmVkXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKFwiQWRtaW4gYWNjZXNzIHJlcXVpcmVkXCIsIDQwMylcclxuICAgICAgICAgIGNhc2UgXCJBY2NvdW50IGlzIHN1c3BlbmRlZFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRXJyb3JSZXNwb25zZShcIkFjY291bnQgaXMgc3VzcGVuZGVkXCIsIDQwMylcclxuICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKFxyXG4gICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIgXHJcbiAgICAgICAgICAgICAgICA/IGVycm9yLm1lc3NhZ2UgXHJcbiAgICAgICAgICAgICAgICA6IFwiSW50ZXJuYWwgc2VydmVyIGVycm9yXCIsXHJcbiAgICAgICAgICAgICAgNTAwXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKFwiSW50ZXJuYWwgc2VydmVyIGVycm9yXCIsIDUwMClcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbImNyZWF0ZVNlcnZlckNsaWVudCIsImdldEF1dGhlbnRpY2F0ZWRVc2VyIiwicmVxdWVzdCIsInN1cGFiYXNlIiwiYXV0aEhlYWRlciIsImhlYWRlcnMiLCJnZXQiLCJ0b2tlbiIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJjb29raWVzIiwidmFsdWUiLCJjb25zb2xlIiwibG9nIiwiYXV0aFByb21pc2UiLCJhdXRoIiwiZ2V0VXNlciIsInRpbWVvdXRQcm9taXNlIiwiUHJvbWlzZSIsIl8iLCJyZWplY3QiLCJzZXRUaW1lb3V0IiwiRXJyb3IiLCJkYXRhIiwidXNlciIsImVycm9yIiwicmFjZSIsIm1lc3NhZ2UiLCJ1c2VyUHJvZmlsZSIsImlzQWRtaW4iLCJyZWd1bGFyVXNlciIsInJlZ3VsYXJVc2VyRXJyb3IiLCJmcm9tIiwic2VsZWN0IiwiZXEiLCJpZCIsInNpbmdsZSIsImVtYWlsIiwiYWRtaW5Vc2VyIiwiYWRtaW5FcnJvciIsImRiRXJyb3IiLCJzdGF0dXMiLCJwcm9maWxlIiwicmVxdWlyZUF1dGgiLCJyZXF1aXJlQWRtaW4iLCJyZXF1aXJlVXNlciIsInZhbGlkYXRlVXNlckFjY2VzcyIsInJlc291cmNlVXNlcklkIiwicmVxdWlyZVVzZXJBY2Nlc3MiLCJjcmVhdGVFcnJvclJlc3BvbnNlIiwiUmVzcG9uc2UiLCJqc29uIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlIiwic3VjY2VzcyIsIndpdGhFcnJvckhhbmRsaW5nIiwiaGFuZGxlciIsInByb2Nlc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/auth-utils.ts\n");

/***/ }),

/***/ "(rsc)/./lib/cache.ts":
/*!**********************!*\
  !*** ./lib/cache.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CACHE_KEYS: () => (/* binding */ CACHE_KEYS),\n/* harmony export */   dataCache: () => (/* binding */ dataCache)\n/* harmony export */ });\nclass DataCache {\n    set(key, data, ttl = this.DEFAULT_TTL) {\n        this.cache.set(key, {\n            data,\n            timestamp: Date.now(),\n            ttl,\n            isStale: false\n        });\n    }\n    get(key) {\n        const item = this.cache.get(key);\n        if (!item) {\n            return null;\n        }\n        const now = Date.now();\n        const age = now - item.timestamp;\n        // If data is expired, remove it\n        if (age > this.STALE_WHILE_REVALIDATE_TTL) {\n            this.cache.delete(key);\n            return null;\n        }\n        // Mark as stale if past TTL but still within stale-while-revalidate window\n        if (age > item.ttl) {\n            item.isStale = true;\n        }\n        return item.data;\n    }\n    isStale(key) {\n        const item = this.cache.get(key);\n        if (!item) return true;\n        const now = Date.now();\n        const age = now - item.timestamp;\n        return age > item.ttl;\n    }\n    // Get data and trigger background refresh if stale\n    getWithRefresh(key, refreshFn) {\n        const data = this.get(key);\n        if (data && this.isStale(key) && !this.refreshPromises.has(key)) {\n            // Background refresh for stale data\n            this.refreshPromises.set(key, refreshFn().then((freshData)=>{\n                this.set(key, freshData);\n                return freshData;\n            }).catch((error)=>{\n                console.error(`Background refresh failed for ${key}:`, error);\n                return data // Return stale data on error\n                ;\n            }).finally(()=>{\n                this.refreshPromises.delete(key);\n            }));\n        }\n        return data;\n    }\n    invalidate(key) {\n        this.cache.delete(key);\n        this.refreshPromises.delete(key);\n    }\n    invalidatePattern(pattern) {\n        const regex = new RegExp(pattern);\n        for (const key of this.cache.keys()){\n            if (regex.test(key)) {\n                this.cache.delete(key);\n                this.refreshPromises.delete(key);\n            }\n        }\n    }\n    clear() {\n        this.cache.clear();\n        this.refreshPromises.clear();\n    }\n    // Force refresh data\n    async forceRefresh(key, refreshFn) {\n        this.invalidate(key);\n        const data = await refreshFn();\n        this.set(key, data);\n        return data;\n    }\n    // Get cache stats for debugging\n    getStats() {\n        return {\n            size: this.cache.size,\n            refreshing: this.refreshPromises.size,\n            keys: Array.from(this.cache.keys())\n        };\n    }\n    constructor(){\n        this.cache = new Map();\n        this.DEFAULT_TTL = 2 * 60 * 1000 // 2 minutes\n        ;\n        this.STALE_WHILE_REVALIDATE_TTL = 5 * 60 * 1000 // 5 minutes\n        ;\n        this.refreshPromises = new Map();\n    }\n}\nconst dataCache = new DataCache();\n// Cache keys with optimized TTLs\nconst CACHE_KEYS = {\n    CURRENCIES: \"currencies\",\n    EXCHANGE_RATES: \"exchange_rates\",\n    USER_RECIPIENTS: (userId)=>`user_recipients_${userId}`,\n    PAYMENT_METHODS: \"payment_methods\",\n    USER_TRANSACTIONS: (userId)=>`user_transactions_${userId}`,\n    TRANSACTION: (transactionId)=>`transaction_${transactionId}`,\n    USER_PROFILE: (userId)=>`user_profile_${userId}`\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/cache.ts\n");

/***/ }),

/***/ "(rsc)/./lib/database.ts":
/*!*************************!*\
  !*** ./lib/database.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminService: () => (/* binding */ adminService),\n/* harmony export */   currencyService: () => (/* binding */ currencyService),\n/* harmony export */   paymentMethodService: () => (/* binding */ paymentMethodService),\n/* harmony export */   recipientService: () => (/* binding */ recipientService),\n/* harmony export */   settingsService: () => (/* binding */ settingsService),\n/* harmony export */   transactionService: () => (/* binding */ transactionService),\n/* harmony export */   userService: () => (/* binding */ userService)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cache */ \"(rsc)/./lib/cache.ts\");\n\n\n// User operations\nconst userService = {\n    async findByEmail (email) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"users\").select(\"*\").eq(\"email\", email).single();\n        if (error && error.code !== \"PGRST116\") throw error;\n        return data;\n    },\n    async updateProfile (userId, updates) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"users\").update({\n            first_name: updates.firstName,\n            last_name: updates.lastName,\n            phone: updates.phone,\n            base_currency: updates.baseCurrency,\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", userId).select().single();\n        if (error) throw error;\n        // Invalidate user profile cache\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.invalidate(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.USER_PROFILE(userId));\n        return data;\n    },\n    async getStats () {\n        const { data: totalUsers } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"users\").select(\"id\", {\n            count: \"exact\"\n        });\n        const { data: activeUsers } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"users\").select(\"id\", {\n            count: \"exact\"\n        }).eq(\"status\", \"active\");\n        const { data: verifiedUsers } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"users\").select(\"id\", {\n            count: \"exact\"\n        }).eq(\"verification_status\", \"verified\");\n        return {\n            total: totalUsers?.length || 0,\n            active: activeUsers?.length || 0,\n            verified: verifiedUsers?.length || 0\n        };\n    }\n};\n// Currency operations with stale-while-revalidate caching\nconst currencyService = {\n    async getAll () {\n        const refreshFn = async ()=>{\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"currencies\").select(\"id, code, name, symbol, flag_svg, status, created_at, updated_at\").eq(\"status\", \"active\").order(\"code\");\n            if (error) throw error;\n            return data?.map((currency)=>({\n                    ...currency,\n                    flag: currency.flag_svg\n                })) || [];\n        };\n        // Try cache first with background refresh\n        const cached = _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.getWithRefresh(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.CURRENCIES, refreshFn);\n        if (cached) {\n            return cached;\n        }\n        // If no cache, fetch fresh data\n        const currencies = await refreshFn();\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.set(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.CURRENCIES, currencies, 5 * 60 * 1000) // 5 minutes\n        ;\n        return currencies;\n    },\n    async getExchangeRates () {\n        const refreshFn = async ()=>{\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"exchange_rates\").select(`\r\n          *,\r\n          from_currency_info:currencies!exchange_rates_from_currency_fkey(id, code, name, symbol, flag_svg),\r\n          to_currency_info:currencies!exchange_rates_to_currency_fkey(id, code, name, symbol, flag_svg)\r\n        `).eq(\"status\", \"active\");\n            if (error) throw error;\n            return data?.map((rate)=>({\n                    ...rate,\n                    from_currency_info: rate.from_currency_info ? {\n                        ...rate.from_currency_info,\n                        flag: rate.from_currency_info.flag_svg\n                    } : undefined,\n                    to_currency_info: rate.to_currency_info ? {\n                        ...rate.to_currency_info,\n                        flag: rate.to_currency_info.flag_svg\n                    } : undefined\n                })) || [];\n        };\n        // Try cache first with background refresh\n        const cached = _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.getWithRefresh(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.EXCHANGE_RATES, refreshFn);\n        if (cached) {\n            return cached;\n        }\n        // If no cache, fetch fresh data\n        const rates = await refreshFn();\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.set(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.EXCHANGE_RATES, rates, 2 * 60 * 1000) // 2 minutes\n        ;\n        return rates;\n    },\n    async getRate (fromCurrency, toCurrency) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"exchange_rates\").select(\"*\").eq(\"from_currency\", fromCurrency).eq(\"to_currency\", toCurrency).eq(\"status\", \"active\").single();\n        if (error && error.code !== \"PGRST116\") throw error;\n        return data;\n    },\n    async updateRate (fromCurrency, toCurrency, rate, feeType = \"free\", feeAmount = 0) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"exchange_rates\").upsert({\n            from_currency: fromCurrency,\n            to_currency: toCurrency,\n            rate,\n            fee_type: feeType,\n            fee_amount: feeAmount,\n            status: \"active\",\n            updated_at: new Date().toISOString()\n        }).select().single();\n        if (error) throw error;\n        // Force refresh exchange rates cache\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.invalidate(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.EXCHANGE_RATES);\n        return data;\n    }\n};\n// Recipient operations with improved caching\nconst recipientService = {\n    async create (userId, recipientData) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"recipients\").insert({\n            user_id: userId,\n            full_name: recipientData.fullName,\n            account_number: recipientData.accountNumber,\n            bank_name: recipientData.bankName,\n            phone_number: recipientData.phoneNumber,\n            currency: recipientData.currency\n        }).select().single();\n        if (error) throw error;\n        // Force refresh user recipients cache\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.invalidate(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.USER_RECIPIENTS(userId));\n        return data;\n    },\n    async getByUserId (userId, requestingUserId) {\n        // Validate user access if requestingUserId is provided\n        if (requestingUserId && requestingUserId !== userId) {\n            throw new Error(\"Access denied: You can only view your own recipients\");\n        }\n        const refreshFn = async ()=>{\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"recipients\").select(\"*\").eq(\"user_id\", userId).order(\"created_at\", {\n                ascending: false\n            });\n            if (error) throw error;\n            return data || [];\n        };\n        // Try cache first with background refresh\n        const cached = _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.getWithRefresh(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.USER_RECIPIENTS(userId), refreshFn);\n        if (cached) {\n            return cached;\n        }\n        // If no cache, fetch fresh data\n        const recipients = await refreshFn();\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.set(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.USER_RECIPIENTS(userId), recipients, 2 * 60 * 1000) // 2 minutes\n        ;\n        return recipients;\n    },\n    async update (recipientId, updates) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"recipients\").update({\n            full_name: updates.fullName,\n            account_number: updates.accountNumber,\n            bank_name: updates.bankName,\n            phone_number: updates.phoneNumber\n        }).eq(\"id\", recipientId).select().single();\n        if (error) throw error;\n        // Invalidate related caches\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.invalidatePattern(\"user_recipients_\");\n        return data;\n    },\n    async delete (recipientId) {\n        const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"recipients\").delete().eq(\"id\", recipientId);\n        if (error) throw error;\n        // Invalidate related caches\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.invalidatePattern(\"user_recipients_\");\n    }\n};\n// Transaction operations with enhanced access control\nconst transactionService = {\n    async create (transactionData, requestingUserId) {\n        // Validate user access if requestingUserId is provided\n        if (requestingUserId && requestingUserId !== transactionData.userId) {\n            throw new Error(\"Access denied: You can only create transactions for yourself\");\n        }\n        const transactionId = `ETID${Date.now()}`;\n        try {\n            // Add timeout to prevent hanging\n            const timeoutPromise = new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Transaction creation timeout\")), 15000));\n            const createPromise = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"transactions\").insert({\n                transaction_id: transactionId,\n                user_id: transactionData.userId,\n                recipient_id: transactionData.recipientId,\n                send_amount: transactionData.sendAmount,\n                send_currency: transactionData.sendCurrency,\n                receive_amount: transactionData.receiveAmount,\n                receive_currency: transactionData.receiveCurrency,\n                exchange_rate: transactionData.exchangeRate,\n                fee_amount: transactionData.feeAmount,\n                fee_type: transactionData.feeType,\n                total_amount: transactionData.totalAmount,\n                reference: transactionData.reference\n            }).select().single();\n            const { data, error } = await Promise.race([\n                createPromise,\n                timeoutPromise\n            ]);\n            if (error) throw error;\n            // Force refresh user transactions cache\n            _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.invalidate(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.USER_TRANSACTIONS(transactionData.userId));\n            return data;\n        } catch (error) {\n            console.error(\"Transaction creation error:\", error);\n            throw new Error(\"Failed to create transaction. Please check your connection and try again.\");\n        }\n    },\n    async getByUserId (userId, limit = 20, requestingUserId) {\n        // Validate user access if requestingUserId is provided\n        if (requestingUserId && requestingUserId !== userId) {\n            throw new Error(\"Access denied: You can only view your own transactions\");\n        }\n        const refreshFn = async ()=>{\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"transactions\").select(`\r\n          *,\r\n          recipient:recipients(*)\r\n        `).eq(\"user_id\", userId).order(\"created_at\", {\n                ascending: false\n            }).limit(limit);\n            if (error) throw error;\n            return data || [];\n        };\n        // Try cache first with background refresh\n        const cached = _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.getWithRefresh(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.USER_TRANSACTIONS(userId), refreshFn);\n        if (cached) {\n            return cached;\n        }\n        // If no cache, fetch fresh data\n        const transactions = await refreshFn();\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.set(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.USER_TRANSACTIONS(userId), transactions, 1 * 60 * 1000) // 1 minute\n        ;\n        return transactions;\n    },\n    async getById (transactionId) {\n        const refreshFn = async ()=>{\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"transactions\").select(`\r\n          *,\r\n          recipient:recipients(*),\r\n          user:users(first_name, last_name, email)\r\n        `).eq(\"transaction_id\", transactionId).single();\n            if (error) throw error;\n            return data;\n        };\n        // Try cache first with background refresh\n        const cached = _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.getWithRefresh(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.TRANSACTION(transactionId), refreshFn);\n        if (cached) {\n            return cached;\n        }\n        // If no cache, fetch fresh data\n        const transaction = await refreshFn();\n        const ttl = transaction.status === \"completed\" ? 5 * 60 * 1000 : 30 * 1000 // 5 min for completed, 30s for active\n        ;\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.set(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.TRANSACTION(transactionId), transaction, ttl);\n        return transaction;\n    },\n    async updateStatus (transactionId, status) {\n        const updates = {\n            status\n        };\n        if (status === \"completed\") {\n            updates.completed_at = new Date().toISOString();\n        }\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"transactions\").update(updates).eq(\"transaction_id\", transactionId).select().single();\n        if (error) throw error;\n        // Force refresh transaction cache\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.invalidate(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.TRANSACTION(transactionId));\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.invalidatePattern(\"user_transactions_\");\n        return data;\n    },\n    async uploadReceipt (transactionId, file) {\n        try {\n            // First check if transaction exists with timeout\n            const timeoutPromise = new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Transaction check timeout\")), 10000));\n            const checkPromise = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"transactions\").select(\"id, transaction_id\").eq(\"transaction_id\", transactionId).single();\n            const { data: existingTransaction, error: checkError } = await Promise.race([\n                checkPromise,\n                timeoutPromise\n            ]);\n            if (checkError || !existingTransaction) {\n                console.error(\"Transaction check error:\", checkError);\n                throw new Error(\"Transaction not found. Please create the transaction first.\");\n            }\n            // Generate unique filename\n            const fileExt = file.name.split(\".\").pop();\n            const fileName = `${transactionId}.${fileExt}`;\n            const filePath = `receipts/${fileName}`;\n            // Upload file to Supabase Storage with timeout\n            const uploadTimeoutPromise = new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Upload timeout\")), 30000));\n            const uploadPromise = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.storage.from(\"transaction-receipts\").upload(filePath, file, {\n                cacheControl: \"3600\",\n                upsert: false\n            });\n            const { data: uploadData, error: uploadError } = await Promise.race([\n                uploadPromise,\n                uploadTimeoutPromise\n            ]);\n            if (uploadError) {\n                console.error(\"Upload error:\", uploadError);\n                throw new Error(`Upload failed: ${uploadError.message}`);\n            }\n            // Get public URL\n            const { data: { publicUrl } } = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.storage.from(\"transaction-receipts\").getPublicUrl(filePath);\n            // Update transaction with receipt URL\n            const updateTimeoutPromise = new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Database update timeout\")), 10000));\n            const updatePromise = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"transactions\").update({\n                receipt_url: publicUrl,\n                receipt_filename: fileName,\n                updated_at: new Date().toISOString()\n            }).eq(\"transaction_id\", transactionId).select();\n            const { data, error } = await Promise.race([\n                updatePromise,\n                updateTimeoutPromise\n            ]);\n            if (error) {\n                console.error(\"Database update error:\", error);\n                throw new Error(`Database update failed: ${error.message}`);\n            }\n            if (!data || data.length === 0) {\n                throw new Error(\"Failed to update transaction with receipt\");\n            }\n            const updatedTransaction = data[0];\n            // Force refresh transaction cache\n            _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.invalidate(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.TRANSACTION(transactionId));\n            return {\n                ...updatedTransaction,\n                receipt_url: publicUrl\n            };\n        } catch (error) {\n            console.error(\"Receipt upload error:\", error);\n            throw error;\n        }\n    },\n    async getStats (timeRange = \"today\") {\n        const dateFilter = new Date();\n        switch(timeRange){\n            case \"today\":\n                dateFilter.setHours(0, 0, 0, 0);\n                break;\n            case \"week\":\n                dateFilter.setDate(dateFilter.getDate() - 7);\n                break;\n            case \"month\":\n                dateFilter.setMonth(dateFilter.getMonth() - 1);\n                break;\n        }\n        const { data: transactions } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"transactions\").select(\"*\").gte(\"created_at\", dateFilter.toISOString());\n        const { data: pendingTransactions } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"transactions\").select(\"id\", {\n            count: \"exact\"\n        }).in(\"status\", [\n            \"pending\",\n            \"processing\"\n        ]);\n        const totalVolume = transactions?.reduce((sum, t)=>sum + Number(t.send_amount), 0) || 0;\n        return {\n            totalTransactions: transactions?.length || 0,\n            totalVolume,\n            pendingTransactions: pendingTransactions?.length || 0\n        };\n    }\n};\n// Payment Methods operations with improved caching\nconst paymentMethodService = {\n    async getAll () {\n        const refreshFn = async ()=>{\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"payment_methods\").select(\"*\").order(\"currency\", {\n                ascending: true\n            }).order(\"is_default\", {\n                ascending: false\n            });\n            if (error) throw error;\n            return data || [];\n        };\n        // Try cache first with background refresh\n        const cached = _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.getWithRefresh(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.PAYMENT_METHODS, refreshFn);\n        if (cached) {\n            return cached;\n        }\n        // If no cache, fetch fresh data\n        const methods = await refreshFn();\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.set(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.PAYMENT_METHODS, methods, 5 * 60 * 1000) // 5 minutes\n        ;\n        return methods;\n    },\n    async getByCurrency (currency) {\n        const allMethods = await this.getAll();\n        return allMethods.filter((pm)=>pm.currency === currency && pm.status === \"active\");\n    },\n    async create (paymentMethodData) {\n        const serverClient = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.createServerClient)();\n        // If setting as default, unset other defaults for the same currency\n        if (paymentMethodData.isDefault) {\n            await serverClient.from(\"payment_methods\").update({\n                is_default: false\n            }).eq(\"currency\", paymentMethodData.currency);\n        }\n        const { data, error } = await serverClient.from(\"payment_methods\").insert({\n            currency: paymentMethodData.currency,\n            type: paymentMethodData.type,\n            name: paymentMethodData.name,\n            account_name: paymentMethodData.accountName,\n            account_number: paymentMethodData.accountNumber,\n            bank_name: paymentMethodData.bankName,\n            qr_code_data: paymentMethodData.qrCodeData,\n            instructions: paymentMethodData.instructions,\n            is_default: paymentMethodData.isDefault || false,\n            status: \"active\"\n        }).select().single();\n        if (error) throw error;\n        // Force refresh payment methods cache\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.invalidate(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.PAYMENT_METHODS);\n        return data;\n    },\n    async update (id, updates) {\n        const serverClient = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.createServerClient)();\n        // If setting as default, unset other defaults for the same currency\n        if (updates.isDefault && updates.currency) {\n            await serverClient.from(\"payment_methods\").update({\n                is_default: false\n            }).eq(\"currency\", updates.currency).neq(\"id\", id);\n        }\n        const { data, error } = await serverClient.from(\"payment_methods\").update({\n            currency: updates.currency,\n            type: updates.type,\n            name: updates.name,\n            account_name: updates.accountName,\n            account_number: updates.accountNumber,\n            bank_name: updates.bankName,\n            qr_code_data: updates.qrCodeData,\n            instructions: updates.instructions,\n            is_default: updates.isDefault\n        }).eq(\"id\", id).select().single();\n        if (error) throw error;\n        // Force refresh payment methods cache\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.invalidate(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.PAYMENT_METHODS);\n        return data;\n    },\n    async updateStatus (id, status) {\n        const serverClient = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.createServerClient)();\n        const { data, error } = await serverClient.from(\"payment_methods\").update({\n            status\n        }).eq(\"id\", id).select().single();\n        if (error) throw error;\n        // Force refresh payment methods cache\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.invalidate(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.PAYMENT_METHODS);\n        return data;\n    },\n    async setDefault (id, currency) {\n        const serverClient = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.createServerClient)();\n        // Unset other defaults for the same currency\n        await serverClient.from(\"payment_methods\").update({\n            is_default: false\n        }).eq(\"currency\", currency);\n        // Set this one as default\n        const { data, error } = await serverClient.from(\"payment_methods\").update({\n            is_default: true\n        }).eq(\"id\", id).select().single();\n        if (error) throw error;\n        // Force refresh payment methods cache\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.invalidate(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.PAYMENT_METHODS);\n        return data;\n    },\n    async delete (id) {\n        const serverClient = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.createServerClient)();\n        const { error } = await serverClient.from(\"payment_methods\").delete().eq(\"id\", id);\n        if (error) throw error;\n        // Force refresh payment methods cache\n        _cache__WEBPACK_IMPORTED_MODULE_1__.dataCache.invalidate(_cache__WEBPACK_IMPORTED_MODULE_1__.CACHE_KEYS.PAYMENT_METHODS);\n    }\n};\n// Admin operations\nconst adminService = {\n    async verifyAdmin (email, password) {\n        const serverClient = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.createServerClient)();\n        const { data: admin, error } = await serverClient.from(\"admin_users\").select(\"*\").eq(\"email\", email).eq(\"status\", \"active\").single();\n        if (error || !admin) return null;\n        // Since we removed password_hash, we need to use Supabase Auth for admin login too\n        // This is a simplified approach - in production, you might want separate admin auth\n        return admin;\n    },\n    async getAllTransactions (filters = {}) {\n        const serverClient = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.createServerClient)();\n        let query = serverClient.from(\"transactions\").select(`\r\n        *,\r\n        recipient:recipients(*),\r\n        user:users(first_name, last_name, email)\r\n      `);\n        if (filters.status && filters.status !== \"all\") {\n            query = query.eq(\"status\", filters.status);\n        }\n        if (filters.currency && filters.currency !== \"all\") {\n            query = query.or(`send_currency.eq.${filters.currency},receive_currency.eq.${filters.currency}`);\n        }\n        if (filters.search) {\n            query = query.or(`transaction_id.ilike.%${filters.search}%,user.email.ilike.%${filters.search}%`);\n        }\n        const { data, error } = await query.order(\"created_at\", {\n            ascending: false\n        }).limit(filters.limit || 50);\n        if (error) throw error;\n        return data;\n    },\n    async getAllUsers (filters = {}) {\n        const serverClient = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.createServerClient)();\n        let query = serverClient.from(\"users\").select(\"*\");\n        if (filters.status && filters.status !== \"all\") {\n            query = query.eq(\"status\", filters.status);\n        }\n        if (filters.verification && filters.verification !== \"all\") {\n            query = query.eq(\"verification_status\", filters.verification);\n        }\n        if (filters.search) {\n            query = query.or(`email.ilike.%${filters.search}%,first_name.ilike.%${filters.search}%,last_name.ilike.%${filters.search}%`);\n        }\n        const { data, error } = await query.order(\"created_at\", {\n            ascending: false\n        }).limit(filters.limit || 50);\n        if (error) throw error;\n        return data;\n    }\n};\n// System settings operations\nconst settingsService = {\n    async get (key) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"system_settings\").select(\"value, data_type\").eq(\"key\", key).single();\n        if (error && error.code !== \"PGRST116\") throw error;\n        if (!data) return null;\n        // Parse value based on data type\n        switch(data.data_type){\n            case \"boolean\":\n                return data.value === \"true\";\n            case \"number\":\n                return Number(data.value);\n            case \"json\":\n                return JSON.parse(data.value);\n            default:\n                return data.value;\n        }\n    },\n    async set (key, value, dataType = \"string\") {\n        const serverClient = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.createServerClient)();\n        // Convert value to string for storage\n        let stringValue;\n        switch(dataType){\n            case \"boolean\":\n                stringValue = value ? \"true\" : \"false\";\n                break;\n            case \"number\":\n                stringValue = String(value);\n                break;\n            case \"json\":\n                stringValue = JSON.stringify(value);\n                break;\n            default:\n                stringValue = String(value);\n        }\n        const { data, error } = await serverClient.from(\"system_settings\").upsert({\n            key,\n            value: stringValue,\n            data_type: dataType\n        }).select().single();\n        if (error) throw error;\n        return data;\n    },\n    async getAll () {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"system_settings\").select(\"*\").order(\"key\");\n        if (error) throw error;\n        return data;\n    },\n    async getByCategory (category) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"system_settings\").select(\"*\").eq(\"category\", category).eq(\"is_active\", true).order(\"key\");\n        if (error) throw error;\n        return data;\n    },\n    async updateMultiple (settings) {\n        const serverClient = (0,_supabase__WEBPACK_IMPORTED_MODULE_0__.createServerClient)();\n        const updates = settings.map(({ key, value, dataType = \"string\" })=>{\n            let stringValue;\n            switch(dataType){\n                case \"boolean\":\n                    stringValue = value ? \"true\" : \"false\";\n                    break;\n                case \"number\":\n                    stringValue = String(value);\n                    break;\n                case \"json\":\n                    stringValue = JSON.stringify(value);\n                    break;\n                default:\n                    stringValue = String(value);\n            }\n            return {\n                key,\n                value: stringValue,\n                data_type: dataType\n            };\n        });\n        const { data, error } = await serverClient.from(\"system_settings\").upsert(updates).select();\n        if (error) throw error;\n        return data;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/database.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createServerClient: () => (/* binding */ createServerClient),\n/* harmony export */   getCurrentUser: () => (/* binding */ getCurrentUser),\n/* harmony export */   signOut: () => (/* binding */ signOut),\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://seeqjiebmrnolcyydewj.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNlZXFqaWVibXJub2xjeXlkZXdqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM2OTIxMTksImV4cCI6MjA2OTI2ODExOX0.7wc1OxdPCuhpBgPZY-pQAdjjOO8VbKdb3O47IQjd4Fc\";\nif (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error(\"Missing Supabase environment variables\");\n}\n// Client-side Supabase client (singleton pattern)\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        persistSession: true,\n        autoRefreshToken: true,\n        detectSessionInUrl: true\n    },\n    global: {\n        headers: {\n            \"X-Client-Info\": \"easner-web-app\"\n        }\n    }\n});\n// Server-side client for admin operations\nconst createServerClient = ()=>{\n    const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n    if (!serviceRoleKey) {\n        throw new Error(\"Missing SUPABASE_SERVICE_ROLE_KEY environment variable\");\n    }\n    return (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, serviceRoleKey, {\n        auth: {\n            persistSession: false,\n            autoRefreshToken: false\n        }\n    });\n};\n// Auth helper functions\nconst getCurrentUser = async ()=>{\n    const { data: { user }, error } = await supabase.auth.getUser();\n    if (error) throw error;\n    return user;\n};\nconst signOut = async ()=>{\n    const { error } = await supabase.auth.signOut();\n    if (error) throw error;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBb0Q7QUFFcEQsTUFBTUMsY0FBY0MsMENBQW9DO0FBQ3hELE1BQU1HLGtCQUFrQkgsa05BQXlDO0FBRWpFLElBQUksQ0FBQ0QsZUFBZSxDQUFDSSxpQkFBaUI7SUFDcEMsTUFBTSxJQUFJRSxNQUFNO0FBQ2xCO0FBRUEsa0RBQWtEO0FBQzNDLE1BQU1DLFdBQVdSLG1FQUFZQSxDQUFDQyxhQUFhSSxpQkFBaUI7SUFDakVJLE1BQU07UUFDSkMsZ0JBQWdCO1FBQ2hCQyxrQkFBa0I7UUFDbEJDLG9CQUFvQjtJQUN0QjtJQUNBQyxRQUFRO1FBQ05DLFNBQVM7WUFDUCxpQkFBaUI7UUFDbkI7SUFDRjtBQUNGLEdBQUU7QUFFRiwwQ0FBMEM7QUFDbkMsTUFBTUMscUJBQXFCO0lBQ2hDLE1BQU1DLGlCQUFpQmQsUUFBUUMsR0FBRyxDQUFDYyx5QkFBeUI7SUFFNUQsSUFBSSxDQUFDRCxnQkFBZ0I7UUFDbkIsTUFBTSxJQUFJVCxNQUFNO0lBQ2xCO0lBRUEsT0FBT1AsbUVBQVlBLENBQUNDLGFBQWFlLGdCQUFnQjtRQUMvQ1AsTUFBTTtZQUNKQyxnQkFBZ0I7WUFDaEJDLGtCQUFrQjtRQUNwQjtJQUNGO0FBQ0YsRUFBQztBQUVELHdCQUF3QjtBQUNqQixNQUFNTyxpQkFBaUI7SUFDNUIsTUFBTSxFQUNKQyxNQUFNLEVBQUVDLElBQUksRUFBRSxFQUNkQyxLQUFLLEVBQ04sR0FBRyxNQUFNYixTQUFTQyxJQUFJLENBQUNhLE9BQU87SUFDL0IsSUFBSUQsT0FBTyxNQUFNQTtJQUNqQixPQUFPRDtBQUNULEVBQUM7QUFFTSxNQUFNRyxVQUFVO0lBQ3JCLE1BQU0sRUFBRUYsS0FBSyxFQUFFLEdBQUcsTUFBTWIsU0FBU0MsSUFBSSxDQUFDYyxPQUFPO0lBQzdDLElBQUlGLE9BQU8sTUFBTUE7QUFDbkIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vhc25lci8uL2xpYi9zdXBhYmFzZS50cz9jOTlmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gXCJAc3VwYWJhc2Uvc3VwYWJhc2UtanNcIlxuXG5jb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCFcbmNvbnN0IHN1cGFiYXNlQW5vbktleSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIVxuXG5pZiAoIXN1cGFiYXNlVXJsIHx8ICFzdXBhYmFzZUFub25LZXkpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBTdXBhYmFzZSBlbnZpcm9ubWVudCB2YXJpYWJsZXNcIilcbn1cblxuLy8gQ2xpZW50LXNpZGUgU3VwYWJhc2UgY2xpZW50IChzaW5nbGV0b24gcGF0dGVybilcbmV4cG9ydCBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VBbm9uS2V5LCB7XG4gIGF1dGg6IHtcbiAgICBwZXJzaXN0U2Vzc2lvbjogdHJ1ZSxcbiAgICBhdXRvUmVmcmVzaFRva2VuOiB0cnVlLFxuICAgIGRldGVjdFNlc3Npb25JblVybDogdHJ1ZSwgLy8gQmV0dGVyIHNlc3Npb24gZGV0ZWN0aW9uIGZvciBSTFNcbiAgfSxcbiAgZ2xvYmFsOiB7XG4gICAgaGVhZGVyczoge1xuICAgICAgJ1gtQ2xpZW50LUluZm8nOiAnZWFzbmVyLXdlYi1hcHAnXG4gICAgfVxuICB9XG59KVxuXG4vLyBTZXJ2ZXItc2lkZSBjbGllbnQgZm9yIGFkbWluIG9wZXJhdGlvbnNcbmV4cG9ydCBjb25zdCBjcmVhdGVTZXJ2ZXJDbGllbnQgPSAoKSA9PiB7XG4gIGNvbnN0IHNlcnZpY2VSb2xlS2V5ID0gcHJvY2Vzcy5lbnYuU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWVxuXG4gIGlmICghc2VydmljZVJvbGVLZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIFNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVkgZW52aXJvbm1lbnQgdmFyaWFibGVcIilcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHNlcnZpY2VSb2xlS2V5LCB7XG4gICAgYXV0aDoge1xuICAgICAgcGVyc2lzdFNlc3Npb246IGZhbHNlLFxuICAgICAgYXV0b1JlZnJlc2hUb2tlbjogZmFsc2UsXG4gICAgfSxcbiAgfSlcbn1cblxuLy8gQXV0aCBoZWxwZXIgZnVuY3Rpb25zXG5leHBvcnQgY29uc3QgZ2V0Q3VycmVudFVzZXIgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkYXRhOiB7IHVzZXIgfSxcbiAgICBlcnJvcixcbiAgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguZ2V0VXNlcigpXG4gIGlmIChlcnJvcikgdGhyb3cgZXJyb3JcbiAgcmV0dXJuIHVzZXJcbn1cblxuZXhwb3J0IGNvbnN0IHNpZ25PdXQgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguc2lnbk91dCgpXG4gIGlmIChlcnJvcikgdGhyb3cgZXJyb3Jcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJzdXBhYmFzZVVybCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJzdXBhYmFzZUFub25LZXkiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsIkVycm9yIiwic3VwYWJhc2UiLCJhdXRoIiwicGVyc2lzdFNlc3Npb24iLCJhdXRvUmVmcmVzaFRva2VuIiwiZGV0ZWN0U2Vzc2lvbkluVXJsIiwiZ2xvYmFsIiwiaGVhZGVycyIsImNyZWF0ZVNlcnZlckNsaWVudCIsInNlcnZpY2VSb2xlS2V5IiwiU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWSIsImdldEN1cnJlbnRVc2VyIiwiZGF0YSIsInVzZXIiLCJlcnJvciIsImdldFVzZXIiLCJzaWduT3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftransactions%2Froute&page=%2Fapi%2Ftransactions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftransactions%2Froute.ts&appDir=D%3A%5CUsers%5Cenyoc%5CDocuments%5CDev%5Ceasner%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CUsers%5Cenyoc%5CDocuments%5CDev%5Ceasner&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();